## IDE - integrated Devlopment Environment
# Java - eclipse , IntellijIdea
# python - VScode, pycharm, VIM
print("Hello World")

# todo: introduction to list data structure
# todo: creating a list
students = ['john', 'mark', 'aziz', 'feruza', 105]
# varname assign [0,    1,   2,     3]
print(students)

# todo: accessing the elements in the list
# list hold values by index,  index starts with
print(students[0])  # prints the 1st element in the list
print(students[3])  # 'feruza' to be printed

# Command + alt + L --> reformat the file based on PEP8 rules >>

# Data Structures : Lists, tuples, dictionaries (HasMap. Hashset...)
# Create, acaess the elements, modify, remove element from Data Structure
# Dictionaries dont guarntee you the same order
print(f"Hello, {students[1].title()}! Thank you for coming.")
# print(f"Hello, {students[4].title()}! Thank you for coming.")
# title atrivute only works with string, can not use number
print("Hello, " + str(students[4]) + "! Thank you for coming.")

# EXCERCISE 3-3. OWN LIST
# create cars list, print diffrernt messages for each car
transportation = ['car', 'motorcycle', 'bike', 'private jet']
print(f"I would like to own a {transportation[0].title()}! in order to get around")

# MODIFY LIST
transportation = ['car', 'motorcycle', 'bike', 'private jet']
print(f"before {transportation}")
transportation[3] = 'tricycle'
print(f"After: {transportation}")

# ADDING ELEMENTS
# appending ( works one at a time)
transportation.append('Lexus')
print(transportation)

# insterting
transportation.insert(2, 'toyota') # this will insert and mve all other object to right, noting lost
print(transportation)

# REMOVE FROM LIST
# delete by index
del transportation[4]
print(f"after del {transportation}")
print(transportation)


transportation.pop()
print(f"after pop: {transportation}")

transportation.pop(2)
print(f"after pop(2): {transportation}")

# delete by value
transportation.remove('bike')
print(f"after remove {transportation}")


# EXCERSIS 3-4 GUEST LIST
guests = ['D.Trump', 'Putin', 'Messi', 'C.Ronaldo', 'Alex Morgan']
print('====================== 3-4 =====================')
print(f"welcome to the dinner {guests[0]}!")
print(f"welcome to the dinner {guests[1]}!")
print(f"welcome to the dinner {guests[2]}!")
print(f"welcome to the dinner {guests[3]}!")
print(f"welcome to the dinner {guests[4]}!")

guests = ['D.Trump', 'Putin', 'Messi', 'C.Ronaldo', 'Alex Morgan']
print('====================== 3-5 =====================')
guests_not_coming =[]
guests_not_coming.append(guests[0])
print(f"{guests[0]} sorry to hear that , please come next time ")
guests[0]= 'M.Sharapova'
print(f"Guests are coming: {guests}")
print(f"Guests are Not coming: {guests_not_coming}")
print(f"welcome to the dinner {guests[0]}!")
print(f"welcome to the dinner {guests[1]}!")
print(f"welcome to the dinner {guests[2]}!")
print(f"welcome to the dinner {guests[3]}!")
print(f"welcome to the dinner {guests[4]}!")

# EXCERICE 3-6

print('============3-6=============')
print("Great news a bigger table has been found")
guests.insert(0, 'Elon Musk')
guests.insert(3, 'Russel Wilson')
guests.append('Bill Gates')
print(f"welcome to the dinner {guests[0]}!")
print(f"welcome to the dinner {guests[1]}!")
print(f"welcome to the dinner {guests[2]}!")
print(f"welcome to the dinner {guests[3]}!")
print(f"welcome to the dinner {guests[4]}!")
print(f"welcome to the dinner {guests[5]}!")
print(f"welcome to the dinner {guests[6]}!")
print(f"welcome to the dinner {guests[7]}!")

print('============3-7=============')
print('Unfortunality we can only invite two people')
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f" Sorry {guests[1]} we can not invite you to the dinner")
guests.pop(1)
print(f"Congradulations {guests[0]} you are still invited")
print(f"Congradulations {guests[1]} you are still invited")








#HW: 3-6, 3-7

# ORGANIZING YOUR LIST
# temporary and permanent sorting
print(sorted(guests)) # temp sorting, sorted() works for some other data strucutres
sorted_guests = sorted(guests) # sorted() - returns you the copy of the list but sorted in asc
print(sorted_guests)
print(guests)

guests.reverse()
print(f"Reversing the list: {guests}")

guests.sort() # only works fr list and does not return anything, just effects the orig list
print(f"Perm sorting with list.sort() : {guests}")
guests.sort(reverse=True)
print(f"Perm reverse (desc) sorting with list.sort() : {guests}")

# List.reverse () -- reverse but not desc order , just reverse OG list
# List.sort(reverse=Truw) - sorts in desc oder


print()
nums = [4, -10, 9, 5, 6, 1,0,44]
print(nums)
nums.reverse()
print(nums)
nums.sort(reverse=True)
print(nums)
# nums[8] = 100  #IndexError: list assignment index out of range
nums.insert(8,100)
print(nums)

print(f"Number of elements in my 'nums' list :{len(nums)}")
print(nums[-1])
print(nums[-5])

#ALL you need to know about LISTS
# list_name = [] - create an empty list
# list.append(newValue)
# list.insert(ind, value)
# del list[ind]
# list.remove[value]
# list.pop() - removes and returns the last element, ist.pop(ind)
# list[ind] =value - assigning a new value to existing index
# list.sort()
# sorted(list -- copies the list and returns sorted copy of the list
# list.reverse()
# len(list) - returns the length of your list (how big is your list, i.e. number of elements)
# list[-n] - index star from the end of the list, last element is list [-1]

# HW 3-6 , 3-7
# HW  3-8

print( '==============3-8=============')
places = [ 'California', 'Chicago', 'Miami', 'Dubai', 'Tashkent']
print(f"Original order \n{places}")
print(f"Alphabetical order: \n{sorted(places)}")
print(f"Original order \n{places}")
print(f"Reversed Aplhabetical: \n{sorted(places, reverse=True)}")
print(f"Original order \n{places}")
places.reverse()
print(f"Reversed \n{places}")
places.reverse()
print(f"Original order \n{places}")
print(f"Alphabetical {places.sort()}")
print(f" This is new order {places}")
print("Reverse Alphabetical")
places.sort(reverse=True)
print(places)


